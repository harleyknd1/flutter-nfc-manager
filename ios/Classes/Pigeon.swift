// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PigeonPollingOption: Int {
  case iso14443 = 0
  case iso15693 = 1
  case iso18092 = 2
}

enum PigeonNdefStatus: Int {
  case notSupported = 0
  case readWrite = 1
  case readOnly = 2
}

enum PigeonTypeNameFormat: Int {
  case empty = 0
  case wellKnown = 1
  case media = 2
  case absoluteUri = 3
  case external = 4
  case unknown = 5
  case unchanged = 6
}

enum PigeonFeliCaPollingRequestCode: Int {
  case noRequest = 0
  case systemCode = 1
  case communicationPerformance = 2
}

enum PigeonFeliCaPollingTimeSlot: Int {
  case max1 = 0
  case max2 = 1
  case max4 = 2
  case max8 = 3
  case max16 = 4
}

enum PigeonMiFareFamily: Int {
  case unknown = 0
  case ultralight = 1
  case plus = 2
  case desfire = 3
}

enum PigeonISO15693RequestFlag: Int {
  case address = 0
  case dualSubCarriers = 1
  case highDataRate = 2
  case option = 3
  case protocolExtension = 4
  case select = 5
}

enum PigeonNfcVasCommandConfigurationMode: Int {
  case normal = 0
  case urlOnly = 1
}

enum PigeonNfcReaderErrorCode: Int {
  case readerSessionInvalidationErrorFirstNDEFTagRead = 0
  case readerSessionInvalidationErrorSessionTerminatedUnexpectedly = 1
  case readerSessionInvalidationErrorSessionTimeout = 2
  case readerSessionInvalidationErrorSystemIsBusy = 3
  case readerSessionInvalidationErrorUserCanceled = 4
  case ndefReaderSessionErrorTagNotWritable = 5
  case ndefReaderSessionErrorTagSizeTooSmall = 6
  case ndefReaderSessionErrorTagUpdateFailure = 7
  case ndefReaderSessionErrorZeroLengthMessage = 8
  case readerTransceiveErrorRetryExceeded = 9
  case readerTransceiveErrorTagConnectionLost = 10
  case readerTransceiveErrorTagNotConnected = 11
  case readerTransceiveErrorTagResponseError = 12
  case readerTransceiveErrorSessionInvalidated = 13
  case readerTransceiveErrorPacketTooLong = 14
  case tagCommandConfigurationErrorInvalidParameters = 15
  case readerErrorUnsupportedFeature = 16
  case readerErrorInvalidParameter = 17
  case readerErrorInvalidParameterLength = 18
  case readerErrorParameterOutOfBound = 19
  case readerErrorRadioDisabled = 20
  case readerErrorSecurityViolation = 21
}

enum PigeonNfcVasResponseErrorCode: Int {
  case success = 0
  case userIntervention = 1
  case dataNotActivated = 2
  case dataNotFound = 3
  case incorrectData = 4
  case unsupportedApplicationVersion = 5
  case wrongLCField = 6
  case wrongParameters = 7
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonTag {
  var handle: String
  var ndef: PigeonNdef? = nil
  var feliCa: PigeonFeliCa? = nil
  var iso15693: PigeonISO15693? = nil
  var iso7816: PigeonISO7816? = nil
  var miFare: PigeonMiFare? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonTag? {
    let handle = __pigeon_list[0] as! String
    let ndef: PigeonNdef? = nilOrValue(__pigeon_list[1])
    let feliCa: PigeonFeliCa? = nilOrValue(__pigeon_list[2])
    let iso15693: PigeonISO15693? = nilOrValue(__pigeon_list[3])
    let iso7816: PigeonISO7816? = nilOrValue(__pigeon_list[4])
    let miFare: PigeonMiFare? = nilOrValue(__pigeon_list[5])

    return PigeonTag(
      handle: handle,
      ndef: ndef,
      feliCa: feliCa,
      iso15693: iso15693,
      iso7816: iso7816,
      miFare: miFare
    )
  }
  func toList() -> [Any?] {
    return [
      handle,
      ndef,
      feliCa,
      iso15693,
      iso7816,
      miFare,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNdef {
  var status: PigeonNdefStatus
  var capacity: Int64
  var cachedNdefMessage: PigeonNdefMessage? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNdef? {
    let status = PigeonNdefStatus(rawValue: __pigeon_list[0] as! Int)!
    let capacity = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let cachedNdefMessage: PigeonNdefMessage? = nilOrValue(__pigeon_list[2])

    return PigeonNdef(
      status: status,
      capacity: capacity,
      cachedNdefMessage: cachedNdefMessage
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
      capacity,
      cachedNdefMessage,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonFeliCa {
  var currentSystemCode: FlutterStandardTypedData
  var currentIDm: FlutterStandardTypedData

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonFeliCa? {
    let currentSystemCode = __pigeon_list[0] as! FlutterStandardTypedData
    let currentIDm = __pigeon_list[1] as! FlutterStandardTypedData

    return PigeonFeliCa(
      currentSystemCode: currentSystemCode,
      currentIDm: currentIDm
    )
  }
  func toList() -> [Any?] {
    return [
      currentSystemCode,
      currentIDm,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonISO15693 {
  var icManufacturerCode: Int64
  var icSerialNumber: FlutterStandardTypedData
  var identifier: FlutterStandardTypedData

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonISO15693? {
    let icManufacturerCode = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let icSerialNumber = __pigeon_list[1] as! FlutterStandardTypedData
    let identifier = __pigeon_list[2] as! FlutterStandardTypedData

    return PigeonISO15693(
      icManufacturerCode: icManufacturerCode,
      icSerialNumber: icSerialNumber,
      identifier: identifier
    )
  }
  func toList() -> [Any?] {
    return [
      icManufacturerCode,
      icSerialNumber,
      identifier,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonISO7816 {
  var initialSelectedAID: String
  var identifier: FlutterStandardTypedData
  var historicalBytes: FlutterStandardTypedData? = nil
  var applicationData: FlutterStandardTypedData? = nil
  var proprietaryApplicationDataCoding: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonISO7816? {
    let initialSelectedAID = __pigeon_list[0] as! String
    let identifier = __pigeon_list[1] as! FlutterStandardTypedData
    let historicalBytes: FlutterStandardTypedData? = nilOrValue(__pigeon_list[2])
    let applicationData: FlutterStandardTypedData? = nilOrValue(__pigeon_list[3])
    let proprietaryApplicationDataCoding = __pigeon_list[4] as! Bool

    return PigeonISO7816(
      initialSelectedAID: initialSelectedAID,
      identifier: identifier,
      historicalBytes: historicalBytes,
      applicationData: applicationData,
      proprietaryApplicationDataCoding: proprietaryApplicationDataCoding
    )
  }
  func toList() -> [Any?] {
    return [
      initialSelectedAID,
      identifier,
      historicalBytes,
      applicationData,
      proprietaryApplicationDataCoding,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonMiFare {
  var mifareFamily: PigeonMiFareFamily
  var identifier: FlutterStandardTypedData
  var historicalBytes: FlutterStandardTypedData? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonMiFare? {
    let mifareFamily = PigeonMiFareFamily(rawValue: __pigeon_list[0] as! Int)!
    let identifier = __pigeon_list[1] as! FlutterStandardTypedData
    let historicalBytes: FlutterStandardTypedData? = nilOrValue(__pigeon_list[2])

    return PigeonMiFare(
      mifareFamily: mifareFamily,
      identifier: identifier,
      historicalBytes: historicalBytes
    )
  }
  func toList() -> [Any?] {
    return [
      mifareFamily.rawValue,
      identifier,
      historicalBytes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNDEFQueryStatus {
  var status: PigeonNdefStatus
  var capacity: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNDEFQueryStatus? {
    let status = PigeonNdefStatus(rawValue: __pigeon_list[0] as! Int)!
    let capacity = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)

    return PigeonNDEFQueryStatus(
      status: status,
      capacity: capacity
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
      capacity,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNdefMessage {
  var records: [PigeonNdefPayload?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNdefMessage? {
    let records = __pigeon_list[0] as! [PigeonNdefPayload?]

    return PigeonNdefMessage(
      records: records
    )
  }
  func toList() -> [Any?] {
    return [
      records
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNdefPayload {
  var typeNameFormat: PigeonTypeNameFormat
  var type: FlutterStandardTypedData
  var identifier: FlutterStandardTypedData
  var payload: FlutterStandardTypedData

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNdefPayload? {
    let typeNameFormat = PigeonTypeNameFormat(rawValue: __pigeon_list[0] as! Int)!
    let type = __pigeon_list[1] as! FlutterStandardTypedData
    let identifier = __pigeon_list[2] as! FlutterStandardTypedData
    let payload = __pigeon_list[3] as! FlutterStandardTypedData

    return PigeonNdefPayload(
      typeNameFormat: typeNameFormat,
      type: type,
      identifier: identifier,
      payload: payload
    )
  }
  func toList() -> [Any?] {
    return [
      typeNameFormat.rawValue,
      type,
      identifier,
      payload,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonFeliCaPollingResponse {
  var manufacturerParameter: FlutterStandardTypedData
  var requestData: FlutterStandardTypedData

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonFeliCaPollingResponse? {
    let manufacturerParameter = __pigeon_list[0] as! FlutterStandardTypedData
    let requestData = __pigeon_list[1] as! FlutterStandardTypedData

    return PigeonFeliCaPollingResponse(
      manufacturerParameter: manufacturerParameter,
      requestData: requestData
    )
  }
  func toList() -> [Any?] {
    return [
      manufacturerParameter,
      requestData,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonFeliCaReadWithoutEncryptionResponse {
  var statusFlag1: Int64
  var statusFlag2: Int64
  var blockData: [FlutterStandardTypedData?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonFeliCaReadWithoutEncryptionResponse? {
    let statusFlag1 = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let statusFlag2 = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let blockData = __pigeon_list[2] as! [FlutterStandardTypedData?]

    return PigeonFeliCaReadWithoutEncryptionResponse(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2,
      blockData: blockData
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
      blockData,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonFeliCaRequestServiceV2Response {
  var statusFlag1: Int64
  var statusFlag2: Int64
  var encryptionIdentifier: Int64
  var nodeKeyVersionListAES: [FlutterStandardTypedData?]
  var nodeKeyVersionListDES: [FlutterStandardTypedData?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonFeliCaRequestServiceV2Response? {
    let statusFlag1 = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let statusFlag2 = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let encryptionIdentifier = __pigeon_list[2] is Int64 ? __pigeon_list[2] as! Int64 : Int64(__pigeon_list[2] as! Int32)
    let nodeKeyVersionListAES = __pigeon_list[3] as! [FlutterStandardTypedData?]
    let nodeKeyVersionListDES = __pigeon_list[4] as! [FlutterStandardTypedData?]

    return PigeonFeliCaRequestServiceV2Response(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2,
      encryptionIdentifier: encryptionIdentifier,
      nodeKeyVersionListAES: nodeKeyVersionListAES,
      nodeKeyVersionListDES: nodeKeyVersionListDES
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
      encryptionIdentifier,
      nodeKeyVersionListAES,
      nodeKeyVersionListDES,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonFeliCaRequestSpecificationVersionResponse {
  var statusFlag1: Int64
  var statusFlag2: Int64
  var basicVersion: FlutterStandardTypedData
  var optionVersion: FlutterStandardTypedData

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonFeliCaRequestSpecificationVersionResponse? {
    let statusFlag1 = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let statusFlag2 = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let basicVersion = __pigeon_list[2] as! FlutterStandardTypedData
    let optionVersion = __pigeon_list[3] as! FlutterStandardTypedData

    return PigeonFeliCaRequestSpecificationVersionResponse(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2,
      basicVersion: basicVersion,
      optionVersion: optionVersion
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
      basicVersion,
      optionVersion,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonFeliCaStatusFlag {
  var statusFlag1: Int64
  var statusFlag2: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonFeliCaStatusFlag? {
    let statusFlag1 = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let statusFlag2 = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)

    return PigeonFeliCaStatusFlag(
      statusFlag1: statusFlag1,
      statusFlag2: statusFlag2
    )
  }
  func toList() -> [Any?] {
    return [
      statusFlag1,
      statusFlag2,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonISO7816APDU {
  var instructionClass: Int64
  var instructionCode: Int64
  var p1Parameter: Int64
  var p2Parameter: Int64
  var data: FlutterStandardTypedData
  var expectedResponseLength: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonISO7816APDU? {
    let instructionClass = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let instructionCode = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let p1Parameter = __pigeon_list[2] is Int64 ? __pigeon_list[2] as! Int64 : Int64(__pigeon_list[2] as! Int32)
    let p2Parameter = __pigeon_list[3] is Int64 ? __pigeon_list[3] as! Int64 : Int64(__pigeon_list[3] as! Int32)
    let data = __pigeon_list[4] as! FlutterStandardTypedData
    let expectedResponseLength = __pigeon_list[5] is Int64 ? __pigeon_list[5] as! Int64 : Int64(__pigeon_list[5] as! Int32)

    return PigeonISO7816APDU(
      instructionClass: instructionClass,
      instructionCode: instructionCode,
      p1Parameter: p1Parameter,
      p2Parameter: p2Parameter,
      data: data,
      expectedResponseLength: expectedResponseLength
    )
  }
  func toList() -> [Any?] {
    return [
      instructionClass,
      instructionCode,
      p1Parameter,
      p2Parameter,
      data,
      expectedResponseLength,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonISO7816ResponseAPDU {
  var payload: FlutterStandardTypedData
  var statusWord1: Int64
  var statusWord2: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonISO7816ResponseAPDU? {
    let payload = __pigeon_list[0] as! FlutterStandardTypedData
    let statusWord1 = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let statusWord2 = __pigeon_list[2] is Int64 ? __pigeon_list[2] as! Int64 : Int64(__pigeon_list[2] as! Int32)

    return PigeonISO7816ResponseAPDU(
      payload: payload,
      statusWord1: statusWord1,
      statusWord2: statusWord2
    )
  }
  func toList() -> [Any?] {
    return [
      payload,
      statusWord1,
      statusWord2,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonISO15693SystemInfo {
  var dataStorageFormatIdentifier: Int64
  var applicationFamilyIdentifier: Int64
  var blockSize: Int64
  var totalBlocks: Int64
  var icReference: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonISO15693SystemInfo? {
    let dataStorageFormatIdentifier = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let applicationFamilyIdentifier = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let blockSize = __pigeon_list[2] is Int64 ? __pigeon_list[2] as! Int64 : Int64(__pigeon_list[2] as! Int32)
    let totalBlocks = __pigeon_list[3] is Int64 ? __pigeon_list[3] as! Int64 : Int64(__pigeon_list[3] as! Int32)
    let icReference = __pigeon_list[4] is Int64 ? __pigeon_list[4] as! Int64 : Int64(__pigeon_list[4] as! Int32)

    return PigeonISO15693SystemInfo(
      dataStorageFormatIdentifier: dataStorageFormatIdentifier,
      applicationFamilyIdentifier: applicationFamilyIdentifier,
      blockSize: blockSize,
      totalBlocks: totalBlocks,
      icReference: icReference
    )
  }
  func toList() -> [Any?] {
    return [
      dataStorageFormatIdentifier,
      applicationFamilyIdentifier,
      blockSize,
      totalBlocks,
      icReference,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNfcReaderSessionError {
  var code: PigeonNfcReaderErrorCode
  var message: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNfcReaderSessionError? {
    let code = PigeonNfcReaderErrorCode(rawValue: __pigeon_list[0] as! Int)!
    let message = __pigeon_list[1] as! String

    return PigeonNfcReaderSessionError(
      code: code,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      code.rawValue,
      message,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNfcVasCommandConfiguration {
  var mode: PigeonNfcVasCommandConfigurationMode
  var passIdentifier: String
  var url: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNfcVasCommandConfiguration? {
    let mode = PigeonNfcVasCommandConfigurationMode(rawValue: __pigeon_list[0] as! Int)!
    let passIdentifier = __pigeon_list[1] as! String
    let url: String? = nilOrValue(__pigeon_list[2])

    return PigeonNfcVasCommandConfiguration(
      mode: mode,
      passIdentifier: passIdentifier,
      url: url
    )
  }
  func toList() -> [Any?] {
    return [
      mode.rawValue,
      passIdentifier,
      url,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonNfcVasResponse {
  var status: PigeonNfcVasResponseErrorCode
  var vasData: FlutterStandardTypedData
  var mobileToken: FlutterStandardTypedData

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PigeonNfcVasResponse? {
    let status = PigeonNfcVasResponseErrorCode(rawValue: __pigeon_list[0] as! Int)!
    let vasData = __pigeon_list[1] as! FlutterStandardTypedData
    let mobileToken = __pigeon_list[2] as! FlutterStandardTypedData

    return PigeonNfcVasResponse(
      status: status,
      vasData: vasData,
      mobileToken: mobileToken
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
      vasData,
      mobileToken,
    ]
  }
}

private class PigeonFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return PigeonFeliCa.fromList(self.readValue() as! [Any?])
    case 129:
      return PigeonISO15693.fromList(self.readValue() as! [Any?])
    case 130:
      return PigeonISO7816.fromList(self.readValue() as! [Any?])
    case 131:
      return PigeonMiFare.fromList(self.readValue() as! [Any?])
    case 132:
      return PigeonNdef.fromList(self.readValue() as! [Any?])
    case 133:
      return PigeonNdefMessage.fromList(self.readValue() as! [Any?])
    case 134:
      return PigeonNdefPayload.fromList(self.readValue() as! [Any?])
    case 135:
      return PigeonNfcReaderSessionError.fromList(self.readValue() as! [Any?])
    case 136:
      return PigeonNfcVasResponse.fromList(self.readValue() as! [Any?])
    case 137:
      return PigeonTag.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonFeliCa {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonISO15693 {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonISO7816 {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonMiFare {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNdef {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNdefMessage {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNdefPayload {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNfcReaderSessionError {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNfcVasResponse {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonTag {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonFlutterApiCodecWriter(data: data)
  }
}

class PigeonFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = PigeonFlutterApiCodec(readerWriter: PigeonFlutterApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PigeonFlutterApiProtocol {
  func tagReaderSessionDidBecomeActive(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func tagReaderSessionDidDetect(tag tagArg: PigeonTag, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func tagReaderSessionDidInvalidateWithError(error errorArg: PigeonNfcReaderSessionError, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func vasReaderSessionDidBecomeActive(completion: @escaping (Result<Void, FlutterError>) -> Void)
  func vasReaderSessionDidReceive(responses responsesArg: [PigeonNfcVasResponse], completion: @escaping (Result<Void, FlutterError>) -> Void)
  func vasReaderSessionDidInvalidateWithError(error errorArg: PigeonNfcReaderSessionError, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class PigeonFlutterApi: PigeonFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterStandardMessageCodec {
    return PigeonFlutterApiCodec.shared
  }
  func tagReaderSessionDidBecomeActive(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidBecomeActive\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func tagReaderSessionDidDetect(tag tagArg: PigeonTag, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidDetect\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func tagReaderSessionDidInvalidateWithError(error errorArg: PigeonNfcReaderSessionError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func vasReaderSessionDidBecomeActive(completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidBecomeActive\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func vasReaderSessionDidReceive(responses responsesArg: [PigeonNfcVasResponse], completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidReceive\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([responsesArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func vasReaderSessionDidInvalidateWithError(error errorArg: PigeonNfcReaderSessionError, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidInvalidateWithError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
private class PigeonHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return PigeonFeliCaPollingResponse.fromList(self.readValue() as! [Any?])
    case 129:
      return PigeonFeliCaReadWithoutEncryptionResponse.fromList(self.readValue() as! [Any?])
    case 130:
      return PigeonFeliCaRequestServiceV2Response.fromList(self.readValue() as! [Any?])
    case 131:
      return PigeonFeliCaRequestSpecificationVersionResponse.fromList(self.readValue() as! [Any?])
    case 132:
      return PigeonFeliCaStatusFlag.fromList(self.readValue() as! [Any?])
    case 133:
      return PigeonISO15693SystemInfo.fromList(self.readValue() as! [Any?])
    case 134:
      return PigeonISO7816APDU.fromList(self.readValue() as! [Any?])
    case 135:
      return PigeonISO7816ResponseAPDU.fromList(self.readValue() as! [Any?])
    case 136:
      return PigeonNDEFQueryStatus.fromList(self.readValue() as! [Any?])
    case 137:
      return PigeonNdefMessage.fromList(self.readValue() as! [Any?])
    case 138:
      return PigeonNdefMessage.fromList(self.readValue() as! [Any?])
    case 139:
      return PigeonNdefPayload.fromList(self.readValue() as! [Any?])
    case 140:
      return PigeonNfcVasCommandConfiguration.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonFeliCaPollingResponse {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonFeliCaReadWithoutEncryptionResponse {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonFeliCaRequestServiceV2Response {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonFeliCaRequestSpecificationVersionResponse {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonFeliCaStatusFlag {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonISO15693SystemInfo {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonISO7816APDU {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonISO7816ResponseAPDU {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNDEFQueryStatus {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNdefMessage {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNdefMessage {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNdefPayload {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonNfcVasCommandConfiguration {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonHostApiCodecWriter(data: data)
  }
}

class PigeonHostApiCodec: FlutterStandardMessageCodec {
  static let shared = PigeonHostApiCodec(readerWriter: PigeonHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PigeonHostApi {
  func tagReaderSessionReadingAvailable() throws -> Bool
  func tagReaderSessionBegin(pollingOptions: [PigeonPollingOption], alertMessage: String?, invalidateAfterFirstRead: Bool) throws
  func tagReaderSessionInvalidate(alertMessage: String?, errorMessage: String?) throws
  func tagReaderSessionRestartPolling() throws
  func tagReaderSessionSetAlertMessage(alertMessage: String) throws
  func vasReaderSessionReadingAvailable() throws -> Bool
  func vasReaderSessionBegin(configurations: [PigeonNfcVasCommandConfiguration], alertMessage: String?) throws
  func vasReaderSessionInvalidate(alertMessage: String?, errorMessage: String?) throws
  func vasReaderSessionSetAlertMessage(alertMessage: String) throws
  func ndefQueryNDEFStatus(handle: String, completion: @escaping (Result<PigeonNDEFQueryStatus, Error>) -> Void)
  func ndefReadNDEF(handle: String, completion: @escaping (Result<PigeonNdefMessage?, Error>) -> Void)
  func ndefWriteNDEF(handle: String, message: PigeonNdefMessage, completion: @escaping (Result<Void, Error>) -> Void)
  func ndefWriteLock(handle: String, completion: @escaping (Result<Void, Error>) -> Void)
  func feliCaPolling(handle: String, systemCode: FlutterStandardTypedData, requestCode: PigeonFeliCaPollingRequestCode, timeSlot: PigeonFeliCaPollingTimeSlot, completion: @escaping (Result<PigeonFeliCaPollingResponse, Error>) -> Void)
  func feliCaRequestService(handle: String, nodeCodeList: [FlutterStandardTypedData], completion: @escaping (Result<[FlutterStandardTypedData], Error>) -> Void)
  func feliCaRequestResponse(handle: String, completion: @escaping (Result<Int64, Error>) -> Void)
  func feliCaReadWithoutEncryption(handle: String, serviceCodeList: [FlutterStandardTypedData], blockList: [FlutterStandardTypedData], completion: @escaping (Result<PigeonFeliCaReadWithoutEncryptionResponse, Error>) -> Void)
  func feliCaWriteWithoutEncryption(handle: String, serviceCodeList: [FlutterStandardTypedData], blockList: [FlutterStandardTypedData], blockData: [FlutterStandardTypedData], completion: @escaping (Result<PigeonFeliCaStatusFlag, Error>) -> Void)
  func feliCaRequestSystemCode(handle: String, completion: @escaping (Result<[FlutterStandardTypedData], Error>) -> Void)
  func feliCaRequestServiceV2(handle: String, nodeCodeList: [FlutterStandardTypedData], completion: @escaping (Result<PigeonFeliCaRequestServiceV2Response, Error>) -> Void)
  func feliCaRequestSpecificationVersion(handle: String, completion: @escaping (Result<PigeonFeliCaRequestSpecificationVersionResponse, Error>) -> Void)
  func feliCaResetMode(handle: String, completion: @escaping (Result<PigeonFeliCaStatusFlag, Error>) -> Void)
  func feliCaSendFeliCaCommand(handle: String, commandPacket: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func miFareSendMiFareCommand(handle: String, commandPacket: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func miFareSendMiFareISO7816Command(handle: String, apdu: PigeonISO7816APDU, completion: @escaping (Result<PigeonISO7816ResponseAPDU, Error>) -> Void)
  func miFareSendMiFareISO7816CommandRaw(handle: String, data: FlutterStandardTypedData, completion: @escaping (Result<PigeonISO7816ResponseAPDU, Error>) -> Void)
  func iso7816SendCommand(handle: String, apdu: PigeonISO7816APDU, completion: @escaping (Result<PigeonISO7816ResponseAPDU, Error>) -> Void)
  func iso7816SendCommandRaw(handle: String, data: FlutterStandardTypedData, completion: @escaping (Result<PigeonISO7816ResponseAPDU, Error>) -> Void)
  func iso15693StayQuiet(handle: String, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693ReadSingleBlock(handle: String, requestFlags: [PigeonISO15693RequestFlag], blockNumber: Int64, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func iso15693WriteSingleBlock(handle: String, requestFlags: [PigeonISO15693RequestFlag], blockNumber: Int64, dataBlock: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693LockBlock(handle: String, requestFlags: [PigeonISO15693RequestFlag], blockNumber: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693ReadMultipleBlocks(handle: String, requestFlags: [PigeonISO15693RequestFlag], blockNumber: Int64, numberOfBlocks: Int64, completion: @escaping (Result<[FlutterStandardTypedData], Error>) -> Void)
  func iso15693WriteMultipleBlocks(handle: String, requestFlags: [PigeonISO15693RequestFlag], blockNumber: Int64, numberOfBlocks: Int64, dataBlocks: [FlutterStandardTypedData], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693Select(handle: String, requestFlags: [PigeonISO15693RequestFlag], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693ResetToReady(handle: String, requestFlags: [PigeonISO15693RequestFlag], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693WriteAfi(handle: String, requestFlags: [PigeonISO15693RequestFlag], afi: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693LockAfi(handle: String, requestFlags: [PigeonISO15693RequestFlag], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693WriteDsfId(handle: String, requestFlags: [PigeonISO15693RequestFlag], dsfId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693LockDsfId(handle: String, requestFlags: [PigeonISO15693RequestFlag], completion: @escaping (Result<Void, Error>) -> Void)
  func iso15693GetSystemInfo(handle: String, requestFlags: [PigeonISO15693RequestFlag], completion: @escaping (Result<PigeonISO15693SystemInfo, Error>) -> Void)
  func iso15693GetMultipleBlockSecurityStatus(handle: String, requestFlags: [PigeonISO15693RequestFlag], blockNumber: Int64, numberOfBlocks: Int64, completion: @escaping (Result<[Int64], Error>) -> Void)
  func iso15693CustomCommand(handle: String, requestFlags: [PigeonISO15693RequestFlag], customCommandCode: Int64, customRequestParameters: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PigeonHostApiSetup {
  /// The codec used by PigeonHostApi.
  static var codec: FlutterStandardMessageCodec { PigeonHostApiCodec.shared }
  /// Sets up an instance of `PigeonHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PigeonHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let tagReaderSessionReadingAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionReadingAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagReaderSessionReadingAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.tagReaderSessionReadingAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagReaderSessionReadingAvailableChannel.setMessageHandler(nil)
    }
    let tagReaderSessionBeginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionBegin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagReaderSessionBeginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pollingOptionsArg = args[0] as! [PigeonPollingOption]
        let alertMessageArg: String? = nilOrValue(args[1])
        let invalidateAfterFirstReadArg = args[2] as! Bool
        do {
          try api.tagReaderSessionBegin(pollingOptions: pollingOptionsArg, alertMessage: alertMessageArg, invalidateAfterFirstRead: invalidateAfterFirstReadArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagReaderSessionBeginChannel.setMessageHandler(nil)
    }
    let tagReaderSessionInvalidateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionInvalidate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagReaderSessionInvalidateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg: String? = nilOrValue(args[0])
        let errorMessageArg: String? = nilOrValue(args[1])
        do {
          try api.tagReaderSessionInvalidate(alertMessage: alertMessageArg, errorMessage: errorMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagReaderSessionInvalidateChannel.setMessageHandler(nil)
    }
    let tagReaderSessionRestartPollingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionRestartPolling\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagReaderSessionRestartPollingChannel.setMessageHandler { _, reply in
        do {
          try api.tagReaderSessionRestartPolling()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagReaderSessionRestartPollingChannel.setMessageHandler(nil)
    }
    let tagReaderSessionSetAlertMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionSetAlertMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      tagReaderSessionSetAlertMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg = args[0] as! String
        do {
          try api.tagReaderSessionSetAlertMessage(alertMessage: alertMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      tagReaderSessionSetAlertMessageChannel.setMessageHandler(nil)
    }
    let vasReaderSessionReadingAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionReadingAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasReaderSessionReadingAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.vasReaderSessionReadingAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasReaderSessionReadingAvailableChannel.setMessageHandler(nil)
    }
    let vasReaderSessionBeginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionBegin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasReaderSessionBeginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configurationsArg = args[0] as! [PigeonNfcVasCommandConfiguration]
        let alertMessageArg: String? = nilOrValue(args[1])
        do {
          try api.vasReaderSessionBegin(configurations: configurationsArg, alertMessage: alertMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasReaderSessionBeginChannel.setMessageHandler(nil)
    }
    let vasReaderSessionInvalidateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionInvalidate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasReaderSessionInvalidateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg: String? = nilOrValue(args[0])
        let errorMessageArg: String? = nilOrValue(args[1])
        do {
          try api.vasReaderSessionInvalidate(alertMessage: alertMessageArg, errorMessage: errorMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasReaderSessionInvalidateChannel.setMessageHandler(nil)
    }
    let vasReaderSessionSetAlertMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionSetAlertMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vasReaderSessionSetAlertMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let alertMessageArg = args[0] as! String
        do {
          try api.vasReaderSessionSetAlertMessage(alertMessage: alertMessageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      vasReaderSessionSetAlertMessageChannel.setMessageHandler(nil)
    }
    let ndefQueryNDEFStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefQueryNDEFStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefQueryNDEFStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.ndefQueryNDEFStatus(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefQueryNDEFStatusChannel.setMessageHandler(nil)
    }
    let ndefReadNDEFChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefReadNDEF\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefReadNDEFChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.ndefReadNDEF(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefReadNDEFChannel.setMessageHandler(nil)
    }
    let ndefWriteNDEFChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteNDEF\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefWriteNDEFChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let messageArg = args[1] as! PigeonNdefMessage
        api.ndefWriteNDEF(handle: handleArg, message: messageArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefWriteNDEFChannel.setMessageHandler(nil)
    }
    let ndefWriteLockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteLock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      ndefWriteLockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.ndefWriteLock(handle: handleArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      ndefWriteLockChannel.setMessageHandler(nil)
    }
    let feliCaPollingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaPolling\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaPollingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let systemCodeArg = args[1] as! FlutterStandardTypedData
        let requestCodeArg = PigeonFeliCaPollingRequestCode(rawValue: args[2] as! Int)!
        let timeSlotArg = PigeonFeliCaPollingTimeSlot(rawValue: args[3] as! Int)!
        api.feliCaPolling(handle: handleArg, systemCode: systemCodeArg, requestCode: requestCodeArg, timeSlot: timeSlotArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaPollingChannel.setMessageHandler(nil)
    }
    let feliCaRequestServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestServiceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let nodeCodeListArg = args[1] as! [FlutterStandardTypedData]
        api.feliCaRequestService(handle: handleArg, nodeCodeList: nodeCodeListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestServiceChannel.setMessageHandler(nil)
    }
    let feliCaRequestResponseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestResponse\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestResponseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaRequestResponse(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestResponseChannel.setMessageHandler(nil)
    }
    let feliCaReadWithoutEncryptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaReadWithoutEncryption\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaReadWithoutEncryptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let serviceCodeListArg = args[1] as! [FlutterStandardTypedData]
        let blockListArg = args[2] as! [FlutterStandardTypedData]
        api.feliCaReadWithoutEncryption(handle: handleArg, serviceCodeList: serviceCodeListArg, blockList: blockListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaReadWithoutEncryptionChannel.setMessageHandler(nil)
    }
    let feliCaWriteWithoutEncryptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaWriteWithoutEncryption\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaWriteWithoutEncryptionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let serviceCodeListArg = args[1] as! [FlutterStandardTypedData]
        let blockListArg = args[2] as! [FlutterStandardTypedData]
        let blockDataArg = args[3] as! [FlutterStandardTypedData]
        api.feliCaWriteWithoutEncryption(handle: handleArg, serviceCodeList: serviceCodeListArg, blockList: blockListArg, blockData: blockDataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaWriteWithoutEncryptionChannel.setMessageHandler(nil)
    }
    let feliCaRequestSystemCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestSystemCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestSystemCodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaRequestSystemCode(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestSystemCodeChannel.setMessageHandler(nil)
    }
    let feliCaRequestServiceV2Channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestServiceV2\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestServiceV2Channel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let nodeCodeListArg = args[1] as! [FlutterStandardTypedData]
        api.feliCaRequestServiceV2(handle: handleArg, nodeCodeList: nodeCodeListArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestServiceV2Channel.setMessageHandler(nil)
    }
    let feliCaRequestSpecificationVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestSpecificationVersion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaRequestSpecificationVersionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaRequestSpecificationVersion(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaRequestSpecificationVersionChannel.setMessageHandler(nil)
    }
    let feliCaResetModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaResetMode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaResetModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.feliCaResetMode(handle: handleArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaResetModeChannel.setMessageHandler(nil)
    }
    let feliCaSendFeliCaCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaSendFeliCaCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      feliCaSendFeliCaCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let commandPacketArg = args[1] as! FlutterStandardTypedData
        api.feliCaSendFeliCaCommand(handle: handleArg, commandPacket: commandPacketArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      feliCaSendFeliCaCommandChannel.setMessageHandler(nil)
    }
    let miFareSendMiFareCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.miFareSendMiFareCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      miFareSendMiFareCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let commandPacketArg = args[1] as! FlutterStandardTypedData
        api.miFareSendMiFareCommand(handle: handleArg, commandPacket: commandPacketArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      miFareSendMiFareCommandChannel.setMessageHandler(nil)
    }
    let miFareSendMiFareISO7816CommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.miFareSendMiFareISO7816Command\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      miFareSendMiFareISO7816CommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let apduArg = args[1] as! PigeonISO7816APDU
        api.miFareSendMiFareISO7816Command(handle: handleArg, apdu: apduArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      miFareSendMiFareISO7816CommandChannel.setMessageHandler(nil)
    }
    let miFareSendMiFareISO7816CommandRawChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.miFareSendMiFareISO7816CommandRaw\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      miFareSendMiFareISO7816CommandRawChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        api.miFareSendMiFareISO7816CommandRaw(handle: handleArg, data: dataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      miFareSendMiFareISO7816CommandRawChannel.setMessageHandler(nil)
    }
    let iso7816SendCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso7816SendCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso7816SendCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let apduArg = args[1] as! PigeonISO7816APDU
        api.iso7816SendCommand(handle: handleArg, apdu: apduArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso7816SendCommandChannel.setMessageHandler(nil)
    }
    let iso7816SendCommandRawChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso7816SendCommandRaw\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso7816SendCommandRawChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        api.iso7816SendCommandRaw(handle: handleArg, data: dataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso7816SendCommandRawChannel.setMessageHandler(nil)
    }
    let iso15693StayQuietChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693StayQuiet\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693StayQuietChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        api.iso15693StayQuiet(handle: handleArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693StayQuietChannel.setMessageHandler(nil)
    }
    let iso15693ReadSingleBlockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693ReadSingleBlock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693ReadSingleBlockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let blockNumberArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.iso15693ReadSingleBlock(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693ReadSingleBlockChannel.setMessageHandler(nil)
    }
    let iso15693WriteSingleBlockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteSingleBlock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteSingleBlockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let blockNumberArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let dataBlockArg = args[3] as! FlutterStandardTypedData
        api.iso15693WriteSingleBlock(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, dataBlock: dataBlockArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteSingleBlockChannel.setMessageHandler(nil)
    }
    let iso15693LockBlockChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693LockBlock\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693LockBlockChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let blockNumberArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.iso15693LockBlock(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693LockBlockChannel.setMessageHandler(nil)
    }
    let iso15693ReadMultipleBlocksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693ReadMultipleBlocks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693ReadMultipleBlocksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let blockNumberArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let numberOfBlocksArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        api.iso15693ReadMultipleBlocks(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, numberOfBlocks: numberOfBlocksArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693ReadMultipleBlocksChannel.setMessageHandler(nil)
    }
    let iso15693WriteMultipleBlocksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteMultipleBlocks\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteMultipleBlocksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let blockNumberArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let numberOfBlocksArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        let dataBlocksArg = args[4] as! [FlutterStandardTypedData]
        api.iso15693WriteMultipleBlocks(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, numberOfBlocks: numberOfBlocksArg, dataBlocks: dataBlocksArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteMultipleBlocksChannel.setMessageHandler(nil)
    }
    let iso15693SelectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693Select\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693SelectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        api.iso15693Select(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693SelectChannel.setMessageHandler(nil)
    }
    let iso15693ResetToReadyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693ResetToReady\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693ResetToReadyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        api.iso15693ResetToReady(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693ResetToReadyChannel.setMessageHandler(nil)
    }
    let iso15693WriteAfiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteAfi\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteAfiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let afiArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.iso15693WriteAfi(handle: handleArg, requestFlags: requestFlagsArg, afi: afiArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteAfiChannel.setMessageHandler(nil)
    }
    let iso15693LockAfiChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693LockAfi\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693LockAfiChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        api.iso15693LockAfi(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693LockAfiChannel.setMessageHandler(nil)
    }
    let iso15693WriteDsfIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteDsfId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693WriteDsfIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let dsfIdArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        api.iso15693WriteDsfId(handle: handleArg, requestFlags: requestFlagsArg, dsfId: dsfIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693WriteDsfIdChannel.setMessageHandler(nil)
    }
    let iso15693LockDsfIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693LockDsfId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693LockDsfIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        api.iso15693LockDsfId(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693LockDsfIdChannel.setMessageHandler(nil)
    }
    let iso15693GetSystemInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693GetSystemInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693GetSystemInfoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        api.iso15693GetSystemInfo(handle: handleArg, requestFlags: requestFlagsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693GetSystemInfoChannel.setMessageHandler(nil)
    }
    let iso15693GetMultipleBlockSecurityStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693GetMultipleBlockSecurityStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693GetMultipleBlockSecurityStatusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let blockNumberArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let numberOfBlocksArg = args[3] is Int64 ? args[3] as! Int64 : Int64(args[3] as! Int32)
        api.iso15693GetMultipleBlockSecurityStatus(handle: handleArg, requestFlags: requestFlagsArg, blockNumber: blockNumberArg, numberOfBlocks: numberOfBlocksArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693GetMultipleBlockSecurityStatusChannel.setMessageHandler(nil)
    }
    let iso15693CustomCommandChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693CustomCommand\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iso15693CustomCommandChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let handleArg = args[0] as! String
        let requestFlagsArg = args[1] as! [PigeonISO15693RequestFlag]
        let customCommandCodeArg = args[2] is Int64 ? args[2] as! Int64 : Int64(args[2] as! Int32)
        let customRequestParametersArg = args[3] as! FlutterStandardTypedData
        api.iso15693CustomCommand(handle: handleArg, requestFlags: requestFlagsArg, customCommandCode: customCommandCodeArg, customRequestParameters: customRequestParametersArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      iso15693CustomCommandChannel.setMessageHandler(nil)
    }
  }
}
