// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PigeonReaderFlag {
  nfcA,
  nfcB,
  nfcBarcode,
  nfcF,
  nfcV,
  noPlatformSounds,
  skipNdefCheck,
}

enum PigeonTypeNameFormat {
  empty,
  wellKnown,
  media,
  absoluteUri,
  external,
  unknown,
  unchanged,
}

enum PigeonMifareClassicType {
  classic,
  plus,
  pro,
  unknown,
}

enum PigeonMifareUltralightType {
  ultralight,
  ultralightC,
  unknown,
}

class PigeonTag {
  PigeonTag({
    required this.handle,
    required this.id,
    required this.techList,
    this.ndef,
    this.nfcA,
    this.nfcB,
    this.nfcF,
    this.nfcV,
    this.isoDep,
    this.mifareClassic,
    this.mifareUltralight,
    this.ndefFormatable,
    this.nfcBarcode,
  });

  String handle;

  Uint8List id;

  List<String?> techList;

  PigeonNdef? ndef;

  PigeonNfcA? nfcA;

  PigeonNfcB? nfcB;

  PigeonNfcF? nfcF;

  PigeonNfcV? nfcV;

  PigeonIsoDep? isoDep;

  PigeonMifareClassic? mifareClassic;

  PigeonMifareUltralight? mifareUltralight;

  String? ndefFormatable;

  PigeonNfcBarcode? nfcBarcode;

  Object encode() {
    return <Object?>[
      handle,
      id,
      techList,
      ndef,
      nfcA,
      nfcB,
      nfcF,
      nfcV,
      isoDep,
      mifareClassic,
      mifareUltralight,
      ndefFormatable,
      nfcBarcode,
    ];
  }

  static PigeonTag decode(Object result) {
    result as List<Object?>;
    return PigeonTag(
      handle: result[0]! as String,
      id: result[1]! as Uint8List,
      techList: (result[2] as List<Object?>?)!.cast<String?>(),
      ndef: result[3] as PigeonNdef?,
      nfcA: result[4] as PigeonNfcA?,
      nfcB: result[5] as PigeonNfcB?,
      nfcF: result[6] as PigeonNfcF?,
      nfcV: result[7] as PigeonNfcV?,
      isoDep: result[8] as PigeonIsoDep?,
      mifareClassic: result[9] as PigeonMifareClassic?,
      mifareUltralight: result[10] as PigeonMifareUltralight?,
      ndefFormatable: result[11] as String?,
      nfcBarcode: result[12] as PigeonNfcBarcode?,
    );
  }
}

class PigeonNdef {
  PigeonNdef({
    required this.type,
    required this.canMakeReadOnly,
    required this.isWritable,
    required this.maxSize,
    this.cachedNdefMessage,
  });

  String type;

  bool canMakeReadOnly;

  bool isWritable;

  int maxSize;

  PigeonNdefMessage? cachedNdefMessage;

  Object encode() {
    return <Object?>[
      type,
      canMakeReadOnly,
      isWritable,
      maxSize,
      cachedNdefMessage,
    ];
  }

  static PigeonNdef decode(Object result) {
    result as List<Object?>;
    return PigeonNdef(
      type: result[0]! as String,
      canMakeReadOnly: result[1]! as bool,
      isWritable: result[2]! as bool,
      maxSize: result[3]! as int,
      cachedNdefMessage: result[4] as PigeonNdefMessage?,
    );
  }
}

class PigeonNfcA {
  PigeonNfcA({
    required this.atqa,
    required this.sak,
  });

  Uint8List atqa;

  int sak;

  Object encode() {
    return <Object?>[
      atqa,
      sak,
    ];
  }

  static PigeonNfcA decode(Object result) {
    result as List<Object?>;
    return PigeonNfcA(
      atqa: result[0]! as Uint8List,
      sak: result[1]! as int,
    );
  }
}

class PigeonNfcB {
  PigeonNfcB({
    required this.applicationData,
    required this.protocolInfo,
  });

  Uint8List applicationData;

  Uint8List protocolInfo;

  Object encode() {
    return <Object?>[
      applicationData,
      protocolInfo,
    ];
  }

  static PigeonNfcB decode(Object result) {
    result as List<Object?>;
    return PigeonNfcB(
      applicationData: result[0]! as Uint8List,
      protocolInfo: result[1]! as Uint8List,
    );
  }
}

class PigeonNfcF {
  PigeonNfcF({
    required this.manufacturer,
    required this.systemCode,
  });

  Uint8List manufacturer;

  Uint8List systemCode;

  Object encode() {
    return <Object?>[
      manufacturer,
      systemCode,
    ];
  }

  static PigeonNfcF decode(Object result) {
    result as List<Object?>;
    return PigeonNfcF(
      manufacturer: result[0]! as Uint8List,
      systemCode: result[1]! as Uint8List,
    );
  }
}

class PigeonNfcV {
  PigeonNfcV({
    required this.dsfId,
    required this.responseFlags,
  });

  int dsfId;

  int responseFlags;

  Object encode() {
    return <Object?>[
      dsfId,
      responseFlags,
    ];
  }

  static PigeonNfcV decode(Object result) {
    result as List<Object?>;
    return PigeonNfcV(
      dsfId: result[0]! as int,
      responseFlags: result[1]! as int,
    );
  }
}

class PigeonIsoDep {
  PigeonIsoDep({
    this.hiLayerResponse,
    this.historicalBytes,
    required this.isExtendedLengthApduSupported,
  });

  Uint8List? hiLayerResponse;

  Uint8List? historicalBytes;

  bool isExtendedLengthApduSupported;

  Object encode() {
    return <Object?>[
      hiLayerResponse,
      historicalBytes,
      isExtendedLengthApduSupported,
    ];
  }

  static PigeonIsoDep decode(Object result) {
    result as List<Object?>;
    return PigeonIsoDep(
      hiLayerResponse: result[0] as Uint8List?,
      historicalBytes: result[1] as Uint8List?,
      isExtendedLengthApduSupported: result[2]! as bool,
    );
  }
}

class PigeonMifareClassic {
  PigeonMifareClassic({
    required this.type,
    required this.blockCount,
    required this.sectorCount,
    required this.size,
  });

  PigeonMifareClassicType type;

  int blockCount;

  int sectorCount;

  int size;

  Object encode() {
    return <Object?>[
      type.index,
      blockCount,
      sectorCount,
      size,
    ];
  }

  static PigeonMifareClassic decode(Object result) {
    result as List<Object?>;
    return PigeonMifareClassic(
      type: PigeonMifareClassicType.values[result[0]! as int],
      blockCount: result[1]! as int,
      sectorCount: result[2]! as int,
      size: result[3]! as int,
    );
  }
}

class PigeonMifareUltralight {
  PigeonMifareUltralight({
    required this.type,
  });

  PigeonMifareUltralightType type;

  Object encode() {
    return <Object?>[
      type.index,
    ];
  }

  static PigeonMifareUltralight decode(Object result) {
    result as List<Object?>;
    return PigeonMifareUltralight(
      type: PigeonMifareUltralightType.values[result[0]! as int],
    );
  }
}

class PigeonNfcBarcode {
  PigeonNfcBarcode({
    required this.type,
    required this.barcode,
  });

  int type;

  Uint8List barcode;

  Object encode() {
    return <Object?>[
      type,
      barcode,
    ];
  }

  static PigeonNfcBarcode decode(Object result) {
    result as List<Object?>;
    return PigeonNfcBarcode(
      type: result[0]! as int,
      barcode: result[1]! as Uint8List,
    );
  }
}

class PigeonNdefMessage {
  PigeonNdefMessage({
    required this.records,
  });

  List<PigeonNdefRecord?> records;

  Object encode() {
    return <Object?>[
      records,
    ];
  }

  static PigeonNdefMessage decode(Object result) {
    result as List<Object?>;
    return PigeonNdefMessage(
      records: (result[0] as List<Object?>?)!.cast<PigeonNdefRecord?>(),
    );
  }
}

class PigeonNdefRecord {
  PigeonNdefRecord({
    required this.tnf,
    required this.type,
    required this.id,
    required this.payload,
  });

  PigeonTypeNameFormat tnf;

  Uint8List type;

  Uint8List id;

  Uint8List payload;

  Object encode() {
    return <Object?>[
      tnf.index,
      type,
      id,
      payload,
    ];
  }

  static PigeonNdefRecord decode(Object result) {
    result as List<Object?>;
    return PigeonNdefRecord(
      tnf: PigeonTypeNameFormat.values[result[0]! as int],
      type: result[1]! as Uint8List,
      id: result[2]! as Uint8List,
      payload: result[3]! as Uint8List,
    );
  }
}

class _PigeonFlutterApiCodec extends StandardMessageCodec {
  const _PigeonFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonIsoDep) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMifareClassic) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMifareUltralight) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdef) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefRecord) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcA) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcB) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcBarcode) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcF) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcV) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTag) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonIsoDep.decode(readValue(buffer)!);
      case 129:
        return PigeonMifareClassic.decode(readValue(buffer)!);
      case 130:
        return PigeonMifareUltralight.decode(readValue(buffer)!);
      case 131:
        return PigeonNdef.decode(readValue(buffer)!);
      case 132:
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 133:
        return PigeonNdefRecord.decode(readValue(buffer)!);
      case 134:
        return PigeonNfcA.decode(readValue(buffer)!);
      case 135:
        return PigeonNfcB.decode(readValue(buffer)!);
      case 136:
        return PigeonNfcBarcode.decode(readValue(buffer)!);
      case 137:
        return PigeonNfcF.decode(readValue(buffer)!);
      case 138:
        return PigeonNfcV.decode(readValue(buffer)!);
      case 139:
        return PigeonTag.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class PigeonFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec =
      _PigeonFlutterApiCodec();

  void onTagDiscovered(PigeonTag tag);

  void onAdapterStateChanged(int state);

  static void setUp(
    PigeonFlutterApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onTagDiscovered$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onTagDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonTag? arg_tag = (args[0] as PigeonTag?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onTagDiscovered was null, expected non-null PigeonTag.');
          try {
            api.onTagDiscovered(arg_tag!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onAdapterStateChanged$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onAdapterStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_state = (args[0] as int?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onAdapterStateChanged was null, expected non-null int.');
          try {
            api.onAdapterStateChanged(arg_state!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class _PigeonHostApiCodec extends StandardMessageCodec {
  const _PigeonHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonNdefMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefRecord) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 129:
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 130:
        return PigeonNdefRecord.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PigeonHostApi {
  /// Constructor for [PigeonHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PigeonHostApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonHostApiCodec();

  final String __pigeon_messageChannelSuffix;

  Future<bool> nfcAdapterIsEnabled() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsEnabled$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<bool> nfcAdapterIsSecureNfcEnabled() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsSecureNfcEnabled$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<bool> nfcAdapterIsSecureNfcSupported() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsSecureNfcSupported$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> nfcAdapterEnableReaderMode(
      {required List<PigeonReaderFlag?> flags}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterEnableReaderMode$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[flags]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> nfcAdapterDisableReaderMode() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterDisableReaderMode$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> nfcAdapterEnableForegroundDispatch() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterEnableForegroundDispatch$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> nfcAdapterDisableForegroundDispatch() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterDisableForegroundDispatch$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonNdefMessage?> ndefGetNdefMessage(
      {required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefGetNdefMessage$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PigeonNdefMessage?);
    }
  }

  Future<void> ndefWriteNdefMessage(
      {required String handle, required PigeonNdefMessage message}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteNdefMessage$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, message]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> ndefMakeReadOnly({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefMakeReadOnly$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<int> nfcAGetMaxTransceiveLength({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> nfcAGetTimeout({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAGetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> nfcASetTimeout(
      {required String handle, required int timeout}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcASetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, timeout]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> nfcATransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcATransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<int> nfcBGetMaxTransceiveLength({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcBGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<Uint8List> nfcBTransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcBTransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<int> nfcFGetMaxTransceiveLength({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> nfcFGetTimeout({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFGetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> nfcFSetTimeout(
      {required String handle, required int timeout}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFSetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, timeout]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> nfcFTransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFTransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<int> nfcVGetMaxTransceiveLength({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcVGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<Uint8List> nfcVTransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcVTransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<int> isoDepGetMaxTransceiveLength({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> isoDepGetTimeout({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepGetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> isoDepSetTimeout(
      {required String handle, required int timeout}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepSetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, timeout]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> isoDepTransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepTransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<int> mifareClassicGetMaxTransceiveLength(
      {required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> mifareClassicGetTimeout({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> mifareClassicSetTimeout(
      {required String handle, required int timeout}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicSetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, timeout]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> mifareClassicBlockToSector(
      {required String handle, required int blockIndex}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicBlockToSector$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> mifareClassicGetBlockCountInSector(
      {required String handle, required int sectorIndex}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetBlockCountInSector$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, sectorIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> mifareClassicSectorToBlock(
      {required String handle, required int sectorIndex}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicSectorToBlock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, sectorIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<bool> mifareClassicAuthenticateSectorWithKeyA({
    required String handle,
    required int sectorIndex,
    required Uint8List key,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyA$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, sectorIndex, key]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<bool> mifareClassicAuthenticateSectorWithKeyB({
    required String handle,
    required int sectorIndex,
    required Uint8List key,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyB$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, sectorIndex, key]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> mifareClassicIncrement({
    required String handle,
    required int blockIndex,
    required int value,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicIncrement$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex, value]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> mifareClassicDecrement({
    required String handle,
    required int blockIndex,
    required int value,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicDecrement$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex, value]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareClassicReadBlock(
      {required String handle, required int blockIndex}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicReadBlock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> mifareClassicWriteBlock({
    required String handle,
    required int blockIndex,
    required Uint8List data,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicWriteBlock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex, data]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> mifareClassicRestore(
      {required String handle, required int blockIndex}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicRestore$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> mifareClassicTransfer(
      {required String handle, required int blockIndex}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicTransfer$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, blockIndex]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareClassicTransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicTransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<int> mifareUltralightGetMaxTransceiveLength(
      {required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightGetMaxTransceiveLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> mifareUltralightGetTimeout({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightGetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> mifareUltralightSetTimeout(
      {required String handle, required int timeout}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightSetTimeout$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, timeout]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareUltralightReadPages(
      {required String handle, required int pageOffset}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightReadPages$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, pageOffset]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> mifareUltralightWritePage({
    required String handle,
    required int pageOffset,
    required Uint8List data,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightWritePage$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, pageOffset, data]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareUltralightTransceive(
      {required String handle, required Uint8List bytes}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightTransceive$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, bytes]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> ndefFormatableFormat(
      {required String handle, required PigeonNdefMessage firstMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefFormatableFormat$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, firstMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> ndefFormatableFormatReadOnly(
      {required String handle, required PigeonNdefMessage firstMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefFormatableFormatReadOnly$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, firstMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
