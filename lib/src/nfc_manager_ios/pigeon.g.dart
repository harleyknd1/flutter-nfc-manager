// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PigeonPollingOption {
  iso14443,
  iso15693,
  iso18092,
}

enum PigeonNdefStatus {
  notSupported,
  readWrite,
  readOnly,
}

enum PigeonTypeNameFormat {
  empty,
  wellKnown,
  media,
  absoluteUri,
  external,
  unknown,
  unchanged,
}

enum PigeonFeliCaPollingRequestCode {
  noRequest,
  systemCode,
  communicationPerformance,
}

enum PigeonFeliCaPollingTimeSlot {
  max1,
  max2,
  max4,
  max8,
  max16,
}

enum PigeonMiFareFamily {
  unknown,
  ultralight,
  plus,
  desfire,
}

enum PigeonISO15693RequestFlag {
  address,
  dualSubCarriers,
  highDataRate,
  option,
  protocolExtension,
  select,
}

enum PigeonNfcVasCommandConfigurationMode {
  normal,
  urlOnly,
}

enum PigeonNfcReaderErrorCode {
  readerSessionInvalidationErrorFirstNDEFTagRead,
  readerSessionInvalidationErrorSessionTerminatedUnexpectedly,
  readerSessionInvalidationErrorSessionTimeout,
  readerSessionInvalidationErrorSystemIsBusy,
  readerSessionInvalidationErrorUserCanceled,
  ndefReaderSessionErrorTagNotWritable,
  ndefReaderSessionErrorTagSizeTooSmall,
  ndefReaderSessionErrorTagUpdateFailure,
  ndefReaderSessionErrorZeroLengthMessage,
  readerTransceiveErrorRetryExceeded,
  readerTransceiveErrorTagConnectionLost,
  readerTransceiveErrorTagNotConnected,
  readerTransceiveErrorTagResponseError,
  readerTransceiveErrorSessionInvalidated,
  readerTransceiveErrorPacketTooLong,
  tagCommandConfigurationErrorInvalidParameters,
  readerErrorUnsupportedFeature,
  readerErrorInvalidParameter,
  readerErrorInvalidParameterLength,
  readerErrorParameterOutOfBound,
  readerErrorRadioDisabled,
  readerErrorSecurityViolation,
}

enum PigeonNfcVasResponseErrorCode {
  success,
  userIntervention,
  dataNotActivated,
  dataNotFound,
  incorrectData,
  unsupportedApplicationVersion,
  wrongLCField,
  wrongParameters,
}

class PigeonTag {
  PigeonTag({
    required this.handle,
    this.ndef,
    this.feliCa,
    this.iso15693,
    this.iso7816,
    this.miFare,
  });

  String handle;

  PigeonNdef? ndef;

  PigeonFeliCa? feliCa;

  PigeonISO15693? iso15693;

  PigeonISO7816? iso7816;

  PigeonMiFare? miFare;

  Object encode() {
    return <Object?>[
      handle,
      ndef,
      feliCa,
      iso15693,
      iso7816,
      miFare,
    ];
  }

  static PigeonTag decode(Object result) {
    result as List<Object?>;
    return PigeonTag(
      handle: result[0]! as String,
      ndef: result[1] as PigeonNdef?,
      feliCa: result[2] as PigeonFeliCa?,
      iso15693: result[3] as PigeonISO15693?,
      iso7816: result[4] as PigeonISO7816?,
      miFare: result[5] as PigeonMiFare?,
    );
  }
}

class PigeonNdef {
  PigeonNdef({
    required this.status,
    required this.capacity,
    this.cachedNdefMessage,
  });

  PigeonNdefStatus status;

  int capacity;

  PigeonNdefMessage? cachedNdefMessage;

  Object encode() {
    return <Object?>[
      status.index,
      capacity,
      cachedNdefMessage,
    ];
  }

  static PigeonNdef decode(Object result) {
    result as List<Object?>;
    return PigeonNdef(
      status: PigeonNdefStatus.values[result[0]! as int],
      capacity: result[1]! as int,
      cachedNdefMessage: result[2] as PigeonNdefMessage?,
    );
  }
}

class PigeonFeliCa {
  PigeonFeliCa({
    required this.currentSystemCode,
    required this.currentIDm,
  });

  Uint8List currentSystemCode;

  Uint8List currentIDm;

  Object encode() {
    return <Object?>[
      currentSystemCode,
      currentIDm,
    ];
  }

  static PigeonFeliCa decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCa(
      currentSystemCode: result[0]! as Uint8List,
      currentIDm: result[1]! as Uint8List,
    );
  }
}

class PigeonISO15693 {
  PigeonISO15693({
    required this.icManufacturerCode,
    required this.icSerialNumber,
    required this.identifier,
  });

  int icManufacturerCode;

  Uint8List icSerialNumber;

  Uint8List identifier;

  Object encode() {
    return <Object?>[
      icManufacturerCode,
      icSerialNumber,
      identifier,
    ];
  }

  static PigeonISO15693 decode(Object result) {
    result as List<Object?>;
    return PigeonISO15693(
      icManufacturerCode: result[0]! as int,
      icSerialNumber: result[1]! as Uint8List,
      identifier: result[2]! as Uint8List,
    );
  }
}

class PigeonISO7816 {
  PigeonISO7816({
    required this.initialSelectedAID,
    required this.identifier,
    this.historicalBytes,
    this.applicationData,
    required this.proprietaryApplicationDataCoding,
  });

  String initialSelectedAID;

  Uint8List identifier;

  Uint8List? historicalBytes;

  Uint8List? applicationData;

  bool proprietaryApplicationDataCoding;

  Object encode() {
    return <Object?>[
      initialSelectedAID,
      identifier,
      historicalBytes,
      applicationData,
      proprietaryApplicationDataCoding,
    ];
  }

  static PigeonISO7816 decode(Object result) {
    result as List<Object?>;
    return PigeonISO7816(
      initialSelectedAID: result[0]! as String,
      identifier: result[1]! as Uint8List,
      historicalBytes: result[2] as Uint8List?,
      applicationData: result[3] as Uint8List?,
      proprietaryApplicationDataCoding: result[4]! as bool,
    );
  }
}

class PigeonMiFare {
  PigeonMiFare({
    required this.mifareFamily,
    required this.identifier,
    this.historicalBytes,
  });

  PigeonMiFareFamily mifareFamily;

  Uint8List identifier;

  Uint8List? historicalBytes;

  Object encode() {
    return <Object?>[
      mifareFamily.index,
      identifier,
      historicalBytes,
    ];
  }

  static PigeonMiFare decode(Object result) {
    result as List<Object?>;
    return PigeonMiFare(
      mifareFamily: PigeonMiFareFamily.values[result[0]! as int],
      identifier: result[1]! as Uint8List,
      historicalBytes: result[2] as Uint8List?,
    );
  }
}

class PigeonNDEFQueryStatus {
  PigeonNDEFQueryStatus({
    required this.status,
    required this.capacity,
  });

  PigeonNdefStatus status;

  int capacity;

  Object encode() {
    return <Object?>[
      status.index,
      capacity,
    ];
  }

  static PigeonNDEFQueryStatus decode(Object result) {
    result as List<Object?>;
    return PigeonNDEFQueryStatus(
      status: PigeonNdefStatus.values[result[0]! as int],
      capacity: result[1]! as int,
    );
  }
}

class PigeonNdefMessage {
  PigeonNdefMessage({
    required this.records,
  });

  List<PigeonNdefPayload?> records;

  Object encode() {
    return <Object?>[
      records,
    ];
  }

  static PigeonNdefMessage decode(Object result) {
    result as List<Object?>;
    return PigeonNdefMessage(
      records: (result[0] as List<Object?>?)!.cast<PigeonNdefPayload?>(),
    );
  }
}

class PigeonNdefPayload {
  PigeonNdefPayload({
    required this.typeNameFormat,
    required this.type,
    required this.identifier,
    required this.payload,
  });

  PigeonTypeNameFormat typeNameFormat;

  Uint8List type;

  Uint8List identifier;

  Uint8List payload;

  Object encode() {
    return <Object?>[
      typeNameFormat.index,
      type,
      identifier,
      payload,
    ];
  }

  static PigeonNdefPayload decode(Object result) {
    result as List<Object?>;
    return PigeonNdefPayload(
      typeNameFormat: PigeonTypeNameFormat.values[result[0]! as int],
      type: result[1]! as Uint8List,
      identifier: result[2]! as Uint8List,
      payload: result[3]! as Uint8List,
    );
  }
}

class PigeonFeliCaPollingResponse {
  PigeonFeliCaPollingResponse({
    required this.manufacturerParameter,
    required this.requestData,
  });

  Uint8List manufacturerParameter;

  Uint8List requestData;

  Object encode() {
    return <Object?>[
      manufacturerParameter,
      requestData,
    ];
  }

  static PigeonFeliCaPollingResponse decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaPollingResponse(
      manufacturerParameter: result[0]! as Uint8List,
      requestData: result[1]! as Uint8List,
    );
  }
}

class PigeonFeliCaReadWithoutEncryptionResponse {
  PigeonFeliCaReadWithoutEncryptionResponse({
    required this.statusFlag1,
    required this.statusFlag2,
    required this.blockData,
  });

  int statusFlag1;

  int statusFlag2;

  List<Uint8List?> blockData;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      blockData,
    ];
  }

  static PigeonFeliCaReadWithoutEncryptionResponse decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaReadWithoutEncryptionResponse(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
      blockData: (result[2] as List<Object?>?)!.cast<Uint8List?>(),
    );
  }
}

class PigeonFeliCaRequestServiceV2Response {
  PigeonFeliCaRequestServiceV2Response({
    required this.statusFlag1,
    required this.statusFlag2,
    required this.encryptionIdentifier,
    required this.nodeKeyVersionListAES,
    required this.nodeKeyVersionListDES,
  });

  int statusFlag1;

  int statusFlag2;

  int encryptionIdentifier;

  List<Uint8List?> nodeKeyVersionListAES;

  List<Uint8List?> nodeKeyVersionListDES;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      encryptionIdentifier,
      nodeKeyVersionListAES,
      nodeKeyVersionListDES,
    ];
  }

  static PigeonFeliCaRequestServiceV2Response decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaRequestServiceV2Response(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
      encryptionIdentifier: result[2]! as int,
      nodeKeyVersionListAES: (result[3] as List<Object?>?)!.cast<Uint8List?>(),
      nodeKeyVersionListDES: (result[4] as List<Object?>?)!.cast<Uint8List?>(),
    );
  }
}

class PigeonFeliCaRequestSpecificationVersionResponse {
  PigeonFeliCaRequestSpecificationVersionResponse({
    required this.statusFlag1,
    required this.statusFlag2,
    required this.basicVersion,
    required this.optionVersion,
  });

  int statusFlag1;

  int statusFlag2;

  Uint8List basicVersion;

  Uint8List optionVersion;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      basicVersion,
      optionVersion,
    ];
  }

  static PigeonFeliCaRequestSpecificationVersionResponse decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaRequestSpecificationVersionResponse(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
      basicVersion: result[2]! as Uint8List,
      optionVersion: result[3]! as Uint8List,
    );
  }
}

class PigeonFeliCaStatusFlag {
  PigeonFeliCaStatusFlag({
    required this.statusFlag1,
    required this.statusFlag2,
  });

  int statusFlag1;

  int statusFlag2;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
    ];
  }

  static PigeonFeliCaStatusFlag decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaStatusFlag(
      statusFlag1: result[0]! as int,
      statusFlag2: result[1]! as int,
    );
  }
}

class PigeonISO7816APDU {
  PigeonISO7816APDU({
    required this.instructionClass,
    required this.instructionCode,
    required this.p1Parameter,
    required this.p2Parameter,
    required this.data,
    required this.expectedResponseLength,
  });

  int instructionClass;

  int instructionCode;

  int p1Parameter;

  int p2Parameter;

  Uint8List data;

  int expectedResponseLength;

  Object encode() {
    return <Object?>[
      instructionClass,
      instructionCode,
      p1Parameter,
      p2Parameter,
      data,
      expectedResponseLength,
    ];
  }

  static PigeonISO7816APDU decode(Object result) {
    result as List<Object?>;
    return PigeonISO7816APDU(
      instructionClass: result[0]! as int,
      instructionCode: result[1]! as int,
      p1Parameter: result[2]! as int,
      p2Parameter: result[3]! as int,
      data: result[4]! as Uint8List,
      expectedResponseLength: result[5]! as int,
    );
  }
}

class PigeonISO7816ResponseAPDU {
  PigeonISO7816ResponseAPDU({
    required this.payload,
    required this.statusWord1,
    required this.statusWord2,
  });

  Uint8List payload;

  int statusWord1;

  int statusWord2;

  Object encode() {
    return <Object?>[
      payload,
      statusWord1,
      statusWord2,
    ];
  }

  static PigeonISO7816ResponseAPDU decode(Object result) {
    result as List<Object?>;
    return PigeonISO7816ResponseAPDU(
      payload: result[0]! as Uint8List,
      statusWord1: result[1]! as int,
      statusWord2: result[2]! as int,
    );
  }
}

class PigeonISO15693SystemInfo {
  PigeonISO15693SystemInfo({
    required this.dataStorageFormatIdentifier,
    required this.applicationFamilyIdentifier,
    required this.blockSize,
    required this.totalBlocks,
    required this.icReference,
  });

  int dataStorageFormatIdentifier;

  int applicationFamilyIdentifier;

  int blockSize;

  int totalBlocks;

  int icReference;

  Object encode() {
    return <Object?>[
      dataStorageFormatIdentifier,
      applicationFamilyIdentifier,
      blockSize,
      totalBlocks,
      icReference,
    ];
  }

  static PigeonISO15693SystemInfo decode(Object result) {
    result as List<Object?>;
    return PigeonISO15693SystemInfo(
      dataStorageFormatIdentifier: result[0]! as int,
      applicationFamilyIdentifier: result[1]! as int,
      blockSize: result[2]! as int,
      totalBlocks: result[3]! as int,
      icReference: result[4]! as int,
    );
  }
}

class PigeonNfcReaderSessionError {
  PigeonNfcReaderSessionError({
    required this.code,
    required this.message,
  });

  PigeonNfcReaderErrorCode code;

  String message;

  Object encode() {
    return <Object?>[
      code.index,
      message,
    ];
  }

  static PigeonNfcReaderSessionError decode(Object result) {
    result as List<Object?>;
    return PigeonNfcReaderSessionError(
      code: PigeonNfcReaderErrorCode.values[result[0]! as int],
      message: result[1]! as String,
    );
  }
}

class PigeonNfcVasCommandConfiguration {
  PigeonNfcVasCommandConfiguration({
    required this.mode,
    required this.passIdentifier,
    this.url,
  });

  PigeonNfcVasCommandConfigurationMode mode;

  String passIdentifier;

  String? url;

  Object encode() {
    return <Object?>[
      mode.index,
      passIdentifier,
      url,
    ];
  }

  static PigeonNfcVasCommandConfiguration decode(Object result) {
    result as List<Object?>;
    return PigeonNfcVasCommandConfiguration(
      mode: PigeonNfcVasCommandConfigurationMode.values[result[0]! as int],
      passIdentifier: result[1]! as String,
      url: result[2] as String?,
    );
  }
}

class PigeonNfcVasResponse {
  PigeonNfcVasResponse({
    required this.status,
    required this.vasData,
    required this.mobileToken,
  });

  PigeonNfcVasResponseErrorCode status;

  Uint8List vasData;

  Uint8List mobileToken;

  Object encode() {
    return <Object?>[
      status.index,
      vasData,
      mobileToken,
    ];
  }

  static PigeonNfcVasResponse decode(Object result) {
    result as List<Object?>;
    return PigeonNfcVasResponse(
      status: PigeonNfcVasResponseErrorCode.values[result[0]! as int],
      vasData: result[1]! as Uint8List,
      mobileToken: result[2]! as Uint8List,
    );
  }
}

class _PigeonFlutterApiCodec extends StandardMessageCodec {
  const _PigeonFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonFeliCa) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO15693) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO7816) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMiFare) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdef) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefPayload) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcReaderSessionError) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcVasResponse) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTag) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonFeliCa.decode(readValue(buffer)!);
      case 129:
        return PigeonISO15693.decode(readValue(buffer)!);
      case 130:
        return PigeonISO7816.decode(readValue(buffer)!);
      case 131:
        return PigeonMiFare.decode(readValue(buffer)!);
      case 132:
        return PigeonNdef.decode(readValue(buffer)!);
      case 133:
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 134:
        return PigeonNdefPayload.decode(readValue(buffer)!);
      case 135:
        return PigeonNfcReaderSessionError.decode(readValue(buffer)!);
      case 136:
        return PigeonNfcVasResponse.decode(readValue(buffer)!);
      case 137:
        return PigeonTag.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class PigeonFlutterApi {
  static const MessageCodec<Object?> pigeonChannelCodec =
      _PigeonFlutterApiCodec();

  void tagReaderSessionDidBecomeActive();

  void tagReaderSessionDidDetect(PigeonTag tag);

  void tagReaderSessionDidInvalidateWithError(
      PigeonNfcReaderSessionError error);

  void vasReaderSessionDidBecomeActive();

  void vasReaderSessionDidReceive(List<PigeonNfcVasResponse?> responses);

  void vasReaderSessionDidInvalidateWithError(
      PigeonNfcReaderSessionError error);

  static void setUp(
    PigeonFlutterApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidBecomeActive$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.tagReaderSessionDidBecomeActive();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidDetect$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidDetect was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonTag? arg_tag = (args[0] as PigeonTag?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidDetect was null, expected non-null PigeonTag.');
          try {
            api.tagReaderSessionDidDetect(arg_tag!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonNfcReaderSessionError? arg_error =
              (args[0] as PigeonNfcReaderSessionError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError was null, expected non-null PigeonNfcReaderSessionError.');
          try {
            api.tagReaderSessionDidInvalidateWithError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidBecomeActive$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.vasReaderSessionDidBecomeActive();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidReceive$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidReceive was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<PigeonNfcVasResponse?>? arg_responses =
              (args[0] as List<Object?>?)?.cast<PigeonNfcVasResponse?>();
          assert(arg_responses != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidReceive was null, expected non-null List<PigeonNfcVasResponse?>.');
          try {
            api.vasReaderSessionDidReceive(arg_responses!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidInvalidateWithError$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidInvalidateWithError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonNfcReaderSessionError? arg_error =
              (args[0] as PigeonNfcReaderSessionError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.vasReaderSessionDidInvalidateWithError was null, expected non-null PigeonNfcReaderSessionError.');
          try {
            api.vasReaderSessionDidInvalidateWithError(arg_error!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class _PigeonHostApiCodec extends StandardMessageCodec {
  const _PigeonHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonFeliCaPollingResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaReadWithoutEncryptionResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaRequestServiceV2Response) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaRequestSpecificationVersionResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaStatusFlag) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO15693SystemInfo) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO7816APDU) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO7816ResponseAPDU) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNDEFQueryStatus) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefPayload) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcVasCommandConfiguration) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return PigeonFeliCaPollingResponse.decode(readValue(buffer)!);
      case 129:
        return PigeonFeliCaReadWithoutEncryptionResponse.decode(
            readValue(buffer)!);
      case 130:
        return PigeonFeliCaRequestServiceV2Response.decode(readValue(buffer)!);
      case 131:
        return PigeonFeliCaRequestSpecificationVersionResponse.decode(
            readValue(buffer)!);
      case 132:
        return PigeonFeliCaStatusFlag.decode(readValue(buffer)!);
      case 133:
        return PigeonISO15693SystemInfo.decode(readValue(buffer)!);
      case 134:
        return PigeonISO7816APDU.decode(readValue(buffer)!);
      case 135:
        return PigeonISO7816ResponseAPDU.decode(readValue(buffer)!);
      case 136:
        return PigeonNDEFQueryStatus.decode(readValue(buffer)!);
      case 137:
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 138:
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 139:
        return PigeonNdefPayload.decode(readValue(buffer)!);
      case 140:
        return PigeonNfcVasCommandConfiguration.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PigeonHostApi {
  /// Constructor for [PigeonHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PigeonHostApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonHostApiCodec();

  final String __pigeon_messageChannelSuffix;

  Future<bool> tagReaderSessionReadingAvailable() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionReadingAvailable$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> tagReaderSessionBegin({
    required List<PigeonPollingOption?> pollingOptions,
    required String? alertMessage,
    required bool invalidateAfterFirstRead,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionBegin$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel.send(
            <Object?>[pollingOptions, alertMessage, invalidateAfterFirstRead])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagReaderSessionInvalidate(
      {required String? alertMessage, required String? errorMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionInvalidate$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[alertMessage, errorMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagReaderSessionRestartPolling() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionRestartPolling$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagReaderSessionSetAlertMessage(
      {required String alertMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.tagReaderSessionSetAlertMessage$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[alertMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> vasReaderSessionReadingAvailable() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionReadingAvailable$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<void> vasReaderSessionBegin(
      {required List<PigeonNfcVasCommandConfiguration?> configurations,
      required String? alertMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionBegin$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[configurations, alertMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> vasReaderSessionInvalidate(
      {required String? alertMessage, required String? errorMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionInvalidate$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[alertMessage, errorMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> vasReaderSessionSetAlertMessage(
      {required String alertMessage}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.vasReaderSessionSetAlertMessage$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[alertMessage]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonNDEFQueryStatus> ndefQueryNDEFStatus(
      {required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefQueryNDEFStatus$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonNDEFQueryStatus?)!;
    }
  }

  Future<PigeonNdefMessage?> ndefReadNDEF({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefReadNDEF$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return (__pigeon_replyList[0] as PigeonNdefMessage?);
    }
  }

  Future<void> ndefWriteNDEF(
      {required String handle, required PigeonNdefMessage message}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteNDEF$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, message]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> ndefWriteLock({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteLock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonFeliCaPollingResponse> feliCaPolling({
    required String handle,
    required Uint8List systemCode,
    required PigeonFeliCaPollingRequestCode requestCode,
    required PigeonFeliCaPollingTimeSlot timeSlot,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaPolling$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel.send(
            <Object?>[handle, systemCode, requestCode.index, timeSlot.index])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonFeliCaPollingResponse?)!;
    }
  }

  Future<List<Uint8List?>> feliCaRequestService(
      {required String handle, required List<Uint8List?> nodeCodeList}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, nodeCodeList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Uint8List?>();
    }
  }

  Future<int> feliCaRequestResponse({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestResponse$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<PigeonFeliCaReadWithoutEncryptionResponse>
      feliCaReadWithoutEncryption({
    required String handle,
    required List<Uint8List?> serviceCodeList,
    required List<Uint8List?> blockList,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaReadWithoutEncryption$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, serviceCodeList, blockList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0]
          as PigeonFeliCaReadWithoutEncryptionResponse?)!;
    }
  }

  Future<PigeonFeliCaStatusFlag> feliCaWriteWithoutEncryption({
    required String handle,
    required List<Uint8List?> serviceCodeList,
    required List<Uint8List?> blockList,
    required List<Uint8List?> blockData,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaWriteWithoutEncryption$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[handle, serviceCodeList, blockList, blockData])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonFeliCaStatusFlag?)!;
    }
  }

  Future<List<Uint8List?>> feliCaRequestSystemCode(
      {required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestSystemCode$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Uint8List?>();
    }
  }

  Future<PigeonFeliCaRequestServiceV2Response> feliCaRequestServiceV2(
      {required String handle, required List<Uint8List?> nodeCodeList}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestServiceV2$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, nodeCodeList]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonFeliCaRequestServiceV2Response?)!;
    }
  }

  Future<PigeonFeliCaRequestSpecificationVersionResponse>
      feliCaRequestSpecificationVersion({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaRequestSpecificationVersion$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0]
          as PigeonFeliCaRequestSpecificationVersionResponse?)!;
    }
  }

  Future<PigeonFeliCaStatusFlag> feliCaResetMode(
      {required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaResetMode$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonFeliCaStatusFlag?)!;
    }
  }

  Future<Uint8List> feliCaSendFeliCaCommand(
      {required String handle, required Uint8List commandPacket}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.feliCaSendFeliCaCommand$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, commandPacket]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<Uint8List> miFareSendMiFareCommand(
      {required String handle, required Uint8List commandPacket}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.miFareSendMiFareCommand$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, commandPacket]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> miFareSendMiFareISO7816Command(
      {required String handle, required PigeonISO7816APDU apdu}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.miFareSendMiFareISO7816Command$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, apdu]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> miFareSendMiFareISO7816CommandRaw(
      {required String handle, required Uint8List data}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.miFareSendMiFareISO7816CommandRaw$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, data]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> iso7816SendCommand(
      {required String handle, required PigeonISO7816APDU apdu}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso7816SendCommand$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, apdu]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> iso7816SendCommandRaw(
      {required String handle, required Uint8List data}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso7816SendCommandRaw$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle, data]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<void> iso15693StayQuiet({required String handle}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693StayQuiet$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handle]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> iso15693ReadSingleBlock({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int blockNumber,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693ReadSingleBlock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags, blockNumber]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> iso15693WriteSingleBlock({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int blockNumber,
    required Uint8List dataBlock,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteSingleBlock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[handle, requestFlags, blockNumber, dataBlock])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockBlock({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int blockNumber,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693LockBlock$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags, blockNumber]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<Uint8List?>> iso15693ReadMultipleBlocks({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int blockNumber,
    required int numberOfBlocks,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693ReadMultipleBlocks$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[handle, requestFlags, blockNumber, numberOfBlocks])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<Uint8List?>();
    }
  }

  Future<void> iso15693WriteMultipleBlocks({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int blockNumber,
    required int numberOfBlocks,
    required List<Uint8List?> dataBlocks,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteMultipleBlocks$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[
      handle,
      requestFlags,
      blockNumber,
      numberOfBlocks,
      dataBlocks
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693Select(
      {required String handle,
      required List<PigeonISO15693RequestFlag?> requestFlags}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693Select$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693ResetToReady(
      {required String handle,
      required List<PigeonISO15693RequestFlag?> requestFlags}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693ResetToReady$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693WriteAfi({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int afi,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteAfi$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags, afi]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockAfi(
      {required String handle,
      required List<PigeonISO15693RequestFlag?> requestFlags}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693LockAfi$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693WriteDsfId({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int dsfId,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693WriteDsfId$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags, dsfId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockDsfId(
      {required String handle,
      required List<PigeonISO15693RequestFlag?> requestFlags}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693LockDsfId$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonISO15693SystemInfo> iso15693GetSystemInfo(
      {required String handle,
      required List<PigeonISO15693RequestFlag?> requestFlags}) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693GetSystemInfo$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[handle, requestFlags]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PigeonISO15693SystemInfo?)!;
    }
  }

  Future<List<int?>> iso15693GetMultipleBlockSecurityStatus({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int blockNumber,
    required int numberOfBlocks,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693GetMultipleBlockSecurityStatus$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[handle, requestFlags, blockNumber, numberOfBlocks])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<int?>();
    }
  }

  Future<Uint8List> iso15693CustomCommand({
    required String handle,
    required List<PigeonISO15693RequestFlag?> requestFlags,
    required int customCommandCode,
    required Uint8List customRequestParameters,
  }) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.nfc_manager.PigeonHostApi.iso15693CustomCommand$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[
      handle,
      requestFlags,
      customCommandCode,
      customRequestParameters
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }
}
