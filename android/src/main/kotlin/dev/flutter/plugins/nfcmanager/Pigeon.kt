// Autogenerated from Pigeon (v18.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package dev.flutter.plugins.nfcmanager

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PigeonReaderFlag(val raw: Int) {
  NFC_A(0),
  NFC_B(1),
  NFC_BARCODE(2),
  NFC_F(3),
  NFC_V(4),
  NO_PLATFORM_SOUNDS(5),
  SKIP_NDEF_CHECK(6);

  companion object {
    fun ofRaw(raw: Int): PigeonReaderFlag? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonTypeNameFormat(val raw: Int) {
  EMPTY(0),
  WELL_KNOWN(1),
  MEDIA(2),
  ABSOLUTE_URI(3),
  EXTERNAL(4),
  UNKNOWN(5),
  UNCHANGED(6);

  companion object {
    fun ofRaw(raw: Int): PigeonTypeNameFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonMifareClassicType(val raw: Int) {
  CLASSIC(0),
  PLUS(1),
  PRO(2),
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): PigeonMifareClassicType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonMifareUltralightType(val raw: Int) {
  ULTRALIGHT(0),
  ULTRALIGHT_C(1),
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): PigeonMifareUltralightType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonTag (
  val handle: String,
  val id: ByteArray,
  val techList: List<String?>,
  val ndef: PigeonNdef? = null,
  val nfcA: PigeonNfcA? = null,
  val nfcB: PigeonNfcB? = null,
  val nfcF: PigeonNfcF? = null,
  val nfcV: PigeonNfcV? = null,
  val isoDep: PigeonIsoDep? = null,
  val mifareClassic: PigeonMifareClassic? = null,
  val mifareUltralight: PigeonMifareUltralight? = null,
  val ndefFormatable: String? = null,
  val nfcBarcode: PigeonNfcBarcode? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonTag {
      val handle = __pigeon_list[0] as String
      val id = __pigeon_list[1] as ByteArray
      val techList = __pigeon_list[2] as List<String?>
      val ndef = __pigeon_list[3] as PigeonNdef?
      val nfcA = __pigeon_list[4] as PigeonNfcA?
      val nfcB = __pigeon_list[5] as PigeonNfcB?
      val nfcF = __pigeon_list[6] as PigeonNfcF?
      val nfcV = __pigeon_list[7] as PigeonNfcV?
      val isoDep = __pigeon_list[8] as PigeonIsoDep?
      val mifareClassic = __pigeon_list[9] as PigeonMifareClassic?
      val mifareUltralight = __pigeon_list[10] as PigeonMifareUltralight?
      val ndefFormatable = __pigeon_list[11] as String?
      val nfcBarcode = __pigeon_list[12] as PigeonNfcBarcode?
      return PigeonTag(handle, id, techList, ndef, nfcA, nfcB, nfcF, nfcV, isoDep, mifareClassic, mifareUltralight, ndefFormatable, nfcBarcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      handle,
      id,
      techList,
      ndef,
      nfcA,
      nfcB,
      nfcF,
      nfcV,
      isoDep,
      mifareClassic,
      mifareUltralight,
      ndefFormatable,
      nfcBarcode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNdef (
  val type: String,
  val canMakeReadOnly: Boolean,
  val isWritable: Boolean,
  val maxSize: Long,
  val cachedNdefMessage: PigeonNdefMessage? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNdef {
      val type = __pigeon_list[0] as String
      val canMakeReadOnly = __pigeon_list[1] as Boolean
      val isWritable = __pigeon_list[2] as Boolean
      val maxSize = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      val cachedNdefMessage = __pigeon_list[4] as PigeonNdefMessage?
      return PigeonNdef(type, canMakeReadOnly, isWritable, maxSize, cachedNdefMessage)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      canMakeReadOnly,
      isWritable,
      maxSize,
      cachedNdefMessage,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcA (
  val atqa: ByteArray,
  val sak: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNfcA {
      val atqa = __pigeon_list[0] as ByteArray
      val sak = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonNfcA(atqa, sak)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      atqa,
      sak,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcB (
  val applicationData: ByteArray,
  val protocolInfo: ByteArray

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNfcB {
      val applicationData = __pigeon_list[0] as ByteArray
      val protocolInfo = __pigeon_list[1] as ByteArray
      return PigeonNfcB(applicationData, protocolInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      applicationData,
      protocolInfo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcF (
  val manufacturer: ByteArray,
  val systemCode: ByteArray

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNfcF {
      val manufacturer = __pigeon_list[0] as ByteArray
      val systemCode = __pigeon_list[1] as ByteArray
      return PigeonNfcF(manufacturer, systemCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      manufacturer,
      systemCode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcV (
  val dsfId: Long,
  val responseFlags: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNfcV {
      val dsfId = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val responseFlags = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonNfcV(dsfId, responseFlags)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      dsfId,
      responseFlags,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonIsoDep (
  val hiLayerResponse: ByteArray? = null,
  val historicalBytes: ByteArray? = null,
  val isExtendedLengthApduSupported: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonIsoDep {
      val hiLayerResponse = __pigeon_list[0] as ByteArray?
      val historicalBytes = __pigeon_list[1] as ByteArray?
      val isExtendedLengthApduSupported = __pigeon_list[2] as Boolean
      return PigeonIsoDep(hiLayerResponse, historicalBytes, isExtendedLengthApduSupported)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hiLayerResponse,
      historicalBytes,
      isExtendedLengthApduSupported,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonMifareClassic (
  val type: PigeonMifareClassicType,
  val blockCount: Long,
  val sectorCount: Long,
  val size: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonMifareClassic {
      val type = PigeonMifareClassicType.ofRaw(__pigeon_list[0] as Int)!!
      val blockCount = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val sectorCount = __pigeon_list[2].let { num -> if (num is Int) num.toLong() else num as Long }
      val size = __pigeon_list[3].let { num -> if (num is Int) num.toLong() else num as Long }
      return PigeonMifareClassic(type, blockCount, sectorCount, size)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type.raw,
      blockCount,
      sectorCount,
      size,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonMifareUltralight (
  val type: PigeonMifareUltralightType

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonMifareUltralight {
      val type = PigeonMifareUltralightType.ofRaw(__pigeon_list[0] as Int)!!
      return PigeonMifareUltralight(type)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNfcBarcode (
  val type: Long,
  val barcode: ByteArray

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNfcBarcode {
      val type = __pigeon_list[0].let { num -> if (num is Int) num.toLong() else num as Long }
      val barcode = __pigeon_list[1] as ByteArray
      return PigeonNfcBarcode(type, barcode)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      barcode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNdefMessage (
  val records: List<PigeonNdefRecord?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNdefMessage {
      val records = __pigeon_list[0] as List<PigeonNdefRecord?>
      return PigeonNdefMessage(records)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      records,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonNdefRecord (
  val tnf: PigeonTypeNameFormat,
  val type: ByteArray,
  val id: ByteArray,
  val payload: ByteArray

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PigeonNdefRecord {
      val tnf = PigeonTypeNameFormat.ofRaw(__pigeon_list[0] as Int)!!
      val type = __pigeon_list[1] as ByteArray
      val id = __pigeon_list[2] as ByteArray
      val payload = __pigeon_list[3] as ByteArray
      return PigeonNdefRecord(tnf, type, id, payload)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      tnf.raw,
      type,
      id,
      payload,
    )
  }
}
private object PigeonFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIsoDep.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonMifareClassic.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonMifareUltralight.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdef.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefMessage.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefRecord.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcA.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcB.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcBarcode.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcF.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNfcV.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonTag.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonIsoDep -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonMifareClassic -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonMifareUltralight -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PigeonNdef -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PigeonNdefMessage -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonNdefRecord -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PigeonNfcA -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PigeonNfcB -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PigeonNfcBarcode -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PigeonNfcF -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is PigeonNfcV -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is PigeonTag -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class PigeonFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by PigeonFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonFlutterApiCodec
    }
  }
  fun onTagDiscovered(tagArg: PigeonTag, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onTagDiscovered$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(tagArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onAdapterStateChanged(stateArg: Long, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.nfc_manager.PigeonFlutterApi.onAdapterStateChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(stateArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
private object PigeonHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefMessage.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefMessage.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonNdefRecord.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PigeonNdefMessage -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PigeonNdefMessage -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PigeonNdefRecord -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PigeonHostApi {
  fun nfcAdapterIsEnabled(): Boolean
  fun nfcAdapterIsSecureNfcEnabled(): Boolean
  fun nfcAdapterIsSecureNfcSupported(): Boolean
  fun nfcAdapterEnableReaderMode(flags: List<PigeonReaderFlag>)
  fun nfcAdapterDisableReaderMode()
  fun nfcAdapterEnableForegroundDispatch()
  fun nfcAdapterDisableForegroundDispatch()
  fun ndefGetNdefMessage(handle: String): PigeonNdefMessage?
  fun ndefWriteNdefMessage(handle: String, message: PigeonNdefMessage)
  fun ndefMakeReadOnly(handle: String): Boolean
  fun nfcAGetMaxTransceiveLength(handle: String): Long
  fun nfcAGetTimeout(handle: String): Long
  fun nfcASetTimeout(handle: String, timeout: Long)
  fun nfcATransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcBGetMaxTransceiveLength(handle: String): Long
  fun nfcBTransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcFGetMaxTransceiveLength(handle: String): Long
  fun nfcFGetTimeout(handle: String): Long
  fun nfcFSetTimeout(handle: String, timeout: Long)
  fun nfcFTransceive(handle: String, bytes: ByteArray): ByteArray
  fun nfcVGetMaxTransceiveLength(handle: String): Long
  fun nfcVTransceive(handle: String, bytes: ByteArray): ByteArray
  fun isoDepGetMaxTransceiveLength(handle: String): Long
  fun isoDepGetTimeout(handle: String): Long
  fun isoDepSetTimeout(handle: String, timeout: Long)
  fun isoDepTransceive(handle: String, bytes: ByteArray): ByteArray
  fun mifareClassicGetMaxTransceiveLength(handle: String): Long
  fun mifareClassicGetTimeout(handle: String): Long
  fun mifareClassicSetTimeout(handle: String, timeout: Long)
  fun mifareClassicBlockToSector(handle: String, blockIndex: Long): Long
  fun mifareClassicGetBlockCountInSector(handle: String, sectorIndex: Long): Long
  fun mifareClassicSectorToBlock(handle: String, sectorIndex: Long): Long
  fun mifareClassicAuthenticateSectorWithKeyA(handle: String, sectorIndex: Long, key: ByteArray): Boolean
  fun mifareClassicAuthenticateSectorWithKeyB(handle: String, sectorIndex: Long, key: ByteArray): Boolean
  fun mifareClassicIncrement(handle: String, blockIndex: Long, value: Long)
  fun mifareClassicDecrement(handle: String, blockIndex: Long, value: Long)
  fun mifareClassicReadBlock(handle: String, blockIndex: Long): ByteArray
  fun mifareClassicWriteBlock(handle: String, blockIndex: Long, data: ByteArray)
  fun mifareClassicRestore(handle: String, blockIndex: Long)
  fun mifareClassicTransfer(handle: String, blockIndex: Long)
  fun mifareClassicTransceive(handle: String, bytes: ByteArray): ByteArray
  fun mifareUltralightGetMaxTransceiveLength(handle: String): Long
  fun mifareUltralightGetTimeout(handle: String): Long
  fun mifareUltralightSetTimeout(handle: String, timeout: Long)
  fun mifareUltralightReadPages(handle: String, pageOffset: Long): ByteArray
  fun mifareUltralightWritePage(handle: String, pageOffset: Long, data: ByteArray)
  fun mifareUltralightTransceive(handle: String, bytes: ByteArray): ByteArray
  fun ndefFormatableFormat(handle: String, firstMessage: PigeonNdefMessage)
  fun ndefFormatableFormatReadOnly(handle: String, firstMessage: PigeonNdefMessage)

  companion object {
    /** The codec used by PigeonHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PigeonHostApiCodec
    }
    /** Sets up an instance of `PigeonHostApi` to handle messages through the `binaryMessenger`. */
    fun setUp(binaryMessenger: BinaryMessenger, api: PigeonHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcAdapterIsEnabled())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsSecureNfcEnabled$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcAdapterIsSecureNfcEnabled())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterIsSecureNfcSupported$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcAdapterIsSecureNfcSupported())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterEnableReaderMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val flagsArg = args[0] as List<PigeonReaderFlag>
            val wrapped: List<Any?> = try {
              api.nfcAdapterEnableReaderMode(flagsArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterDisableReaderMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.nfcAdapterDisableReaderMode()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterEnableForegroundDispatch$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.nfcAdapterEnableForegroundDispatch()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAdapterDisableForegroundDispatch$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.nfcAdapterDisableForegroundDispatch()
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefGetNdefMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.ndefGetNdefMessage(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefWriteNdefMessage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val messageArg = args[1] as PigeonNdefMessage
            val wrapped: List<Any?> = try {
              api.ndefWriteNdefMessage(handleArg, messageArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefMakeReadOnly$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.ndefMakeReadOnly(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcAGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcAGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcAGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcASetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.nfcASetTimeout(handleArg, timeoutArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcATransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcATransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcBGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcBGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcBTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcBTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcFGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcFGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.nfcFSetTimeout(handleArg, timeoutArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcFTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcFTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcVGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcVGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.nfcVTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.nfcVTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.isoDepGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.isoDepGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.isoDepSetTimeout(handleArg, timeoutArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.isoDepTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.isoDepTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.mifareClassicSetTimeout(handleArg, timeoutArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicBlockToSector$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicBlockToSector(handleArg, blockIndexArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicGetBlockCountInSector$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicGetBlockCountInSector(handleArg, sectorIndexArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicSectorToBlock$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicSectorToBlock(handleArg, sectorIndexArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyA$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val keyArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicAuthenticateSectorWithKeyA(handleArg, sectorIndexArg, keyArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyB$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val sectorIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val keyArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicAuthenticateSectorWithKeyB(handleArg, sectorIndexArg, keyArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicIncrement$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val valueArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.mifareClassicIncrement(handleArg, blockIndexArg, valueArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicDecrement$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val valueArg = args[2].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.mifareClassicDecrement(handleArg, blockIndexArg, valueArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicReadBlock$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicReadBlock(handleArg, blockIndexArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicWriteBlock$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val dataArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              api.mifareClassicWriteBlock(handleArg, blockIndexArg, dataArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicRestore$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.mifareClassicRestore(handleArg, blockIndexArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicTransfer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val blockIndexArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.mifareClassicTransfer(handleArg, blockIndexArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareClassicTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareClassicTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightGetMaxTransceiveLength$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareUltralightGetMaxTransceiveLength(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightGetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareUltralightGetTimeout(handleArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightSetTimeout$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val timeoutArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.mifareUltralightSetTimeout(handleArg, timeoutArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightReadPages$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val pageOffsetArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareUltralightReadPages(handleArg, pageOffsetArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightWritePage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val pageOffsetArg = args[1].let { num -> if (num is Int) num.toLong() else num as Long }
            val dataArg = args[2] as ByteArray
            val wrapped: List<Any?> = try {
              api.mifareUltralightWritePage(handleArg, pageOffsetArg, dataArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.mifareUltralightTransceive$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val bytesArg = args[1] as ByteArray
            val wrapped: List<Any?> = try {
              listOf<Any?>(api.mifareUltralightTransceive(handleArg, bytesArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefFormatableFormat$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val firstMessageArg = args[1] as PigeonNdefMessage
            val wrapped: List<Any?> = try {
              api.ndefFormatableFormat(handleArg, firstMessageArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.nfc_manager.PigeonHostApi.ndefFormatableFormatReadOnly$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleArg = args[0] as String
            val firstMessageArg = args[1] as PigeonNdefMessage
            val wrapped: List<Any?> = try {
              api.ndefFormatableFormatReadOnly(handleArg, firstMessageArg)
              listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
